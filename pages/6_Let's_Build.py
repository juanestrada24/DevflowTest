# pages/6_let‚Äôs_build.py

import streamlit as st
import openai

# --- Configuraci√≥n de la p√°gina ---
st.set_page_config(page_title="Let‚Äôs Build ‚Äì An√°lisis Conversacional", layout="wide")

# --- Clave API desde secrets ---
openai.api_key = st.secrets["OPENAI_API_KEY"]

# --- T√≠tulo ---
st.title("üèóÔ∏è Let‚Äôs Build")
st.subheader("Describe tu operaci√≥n inmobiliaria en lenguaje natural y analizamos los KPIs del flip.")

# --- Input del usuario ---
user_input = st.text_area(
    "‚úçÔ∏è Describe tu flip inmobiliario (compra, renovaci√≥n, ARV, tiempo, etc.):",
    placeholder="Ej: Estoy comprando una casa por $350,000, planeo renovarla por $45,000 y venderla por $520,000. Tomar√° 6 meses...",
    height=180
)

# --- Bot√≥n de an√°lisis ---
if st.button("üîç Analizar Flip"):
    if not user_input.strip():
        st.warning("Por favor ingresa una descripci√≥n para analizar.")
    else:
        with st.spinner("Procesando an√°lisis..."):

            # --- Prompt a OpenAI ---
            prompt = f"""
Eres un analista financiero de flips inmobiliarios. A partir de la siguiente descripci√≥n, extrae los siguientes campos:

- precio_compra (USD)
- renovacion (USD)
- arv (USD)
- comision_venta (porcentaje, asume 6% si no se menciona)
- tiempo_proyecto (en meses, asume 6 si no se menciona)

Luego calcula:
- utilidad_bruta = arv - (precio_compra + renovacion + comision_venta)
- ROI = utilidad_bruta / (precio_compra + renovacion)
- equity_multiple = arv / (precio_compra + renovacion)

Devuelve un diccionario de Python como este ejemplo:
{{
  "precio_compra": 350000,
  "renovacion": 45000,
  "arv": 520000,
  "comision_venta": 31200,
  "tiempo_proyecto_meses": 6,
  "utilidad_bruta": 93800,
  "ROI": 0.22,
  "equity_multiple": 1.22
}}

Descripci√≥n:
\"\"\"{user_input}\"\"\"
"""

            # --- Llamada a OpenAI ---
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": prompt}],
                    temperature=0.2
                )

                result = response["choices"][0]["message"]["content"]

                # --- Mostrar resultado ---
                st.success("‚úÖ An√°lisis generado")
                st.code(result, language="python")

            except Exception as e:
                st.error(f"‚ùå Error al generar an√°lisis: {str(e)}")
